        long double xn, xk, dx;

        long double needResult, result, element;
        int k;

        cout << "Введите начальное значение" << endl;
        cin >> xn;
        cout << "Введите конечное значение" << endl;
        cin >> xk;
        cout << "Введите шаг" << endl;
        cin >> dx;

        cout << "-------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
        cout << "| Значение x | Сравниваемое значение |#| Точность eps1 | Значение функции f1 | Количество итераций |#| Точность eps2 | Значение функции f2 | Количество итераций |#|" << endl;
        cout << "-------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;

        for (xn; xn <= xk; xn += dx)
        {
            needResult = sin(xn) / xn;

            result = 1;
            element = 1;
            k = 0;

            do {
                element *= -(xn * xn) / ((2 * k + 2) * (2 * k + 3));
                result += element;
                k++;
            } while (fabs(result - needResult) > 0.1);

            cout << fixed << "|" << setw(12) << xn << "|" << setw(23) << needResult << "|#|" << setw(15) << 0.1 << "|" << setw(21) << result << "|" << setw(21) << k << "|#|";

            result = 1;
            element = 1;
            k = 0;

            do {
                element *= -(xn * xn) / ((2 * k + 2) * (2 * k + 3));;
                result += element;
                k++;
            } while (fabs(result - needResult) > 0.000001);
            cout << setw(15) << 0.000001 << "|" << setw(21) << result << "|" << setw(21) << k << "|#|" << endl;
            cout << "-------------------------------------------------------------------------------------------------------------------------------------------------------------------" << endl;
        }

		break;